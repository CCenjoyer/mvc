{% extends "base.html.twig" %}

{% block title %}Home{% endblock %}

{% block body %}
    <h1>Report Page</h1>
    <aside class = "asidenav">
        <ul>
            <li><a href="#kmom01">Kmom01</a></li>
            <li><a href="#kmom02">Kmom02</a></li>
            <li><a href="#kmom03">Kmom03</a></li>
            <li><a href="#kmom04">Kmom04</a></li>
            <li><a href="#kmom05">Kmom05</a></li>
            <li><a href="#kmom06">Kmom06</a></li>
            <li><a href="#kmom10">Kmom07-10</a></li>
        </ul>
    </aside>
    <div class="kmomcontent">
        <h2 id="kmom01">Kmom01</h2>
        <h3 class="kmomtextheader"><strong>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</strong></h3>
        <p class="kmom-text">I början av detta år gick jag kursen <em><a href="https://dbwebb.se/kurser/oopython-v3">Algoritmer och datastrukturer med objektorienterad Python</a></em> vilket, som
        det låter, hade en väldigt stor fokus på objektorientering. Varje steg på kursen så arbetade på något vis med objekt vare dem var helt självgjorda eller 
        dels inspererade av tillgiven instruktion.</p>
        <h3 class="kmomtextheader"><strong>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</strong></h3>
        <p class="kmom-text">
        Klasser inom PHP defineras med hjälp av class-nyckelordet, precis som i andra språk så har kan klasser ha en konstruktor, attribut och metoder.
        Du kan också skapa en klass som ärver från en annan med nyckelordet extends vid defineringen av klassen.
        Vid skapelsen av ett objekt som är av en viss klass använder du nyckelorder <em>new</em>, t.ex: $dollar = new Dollar();
        </p>
        <p class="kmom-text">
        Dock så är det enda vi använt klasser för hittils att skapa routes till olika sidor.
        </p>
        <h3 class="kmomtextheader"><strong>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</strong></h3>
        <p class="kmom-text">
        Både Databas-kursen och design kursen har hjälpt enormt med att göra processen att lära känna filerna och filsystemet i uppgiften väldigt mycket lättare.
        Men avän i oopython så arbetade vi också med routes. Alla dessa kurser tillsammans har förberett mig väldigt bra för att inte bli överväldigad
        med det nya projektet. 
        </p>
        <p class="kmom-text">
        Jag måste säga dock, det kändes smidigare att arbeta med controllers och paths i Symfony än i express. Kändes väldigt enkelt att att skaa en route in en kontroller
        som sedan leder till en render av en template. Det är en del som jag inte riktigt är helt säker på än. För det mesta har detta att göra med bilderna och de tre
        olika mapparna dem ligger i och i fall där man ska ge routen till dessa bilder.
        </p>
        <h3 class="kmomtextheader"><strong>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</strong></h3>
        <p class="kmom-text">
        Det finns en del av artikeln om password encryption, hashing och '<em>salting</em>'?? Och precis som artikeln nämner, någon gång som kommer man behöva göra ett proppert
        inloggnings-system, och i det fallet så är ju säker förvaring av lösenord och kontodetaljer prio ett. Medans man gjorde ett inloggnings-system i webteknik kursen, kände 
        inte jag att jag gick ur min väg för att göra skapelsen eller hanteringen av konton inom projekten speciellt mycket säkrare. Trots att lösenorden hade hashing.
        </p>
        <p class="kmom-text">
        Strax under det finns ett segment om data-filtering, vilket är en viktig del av applikationssäkerhet. Det handlar om att validera och rensa användarinput innan det används i en applikation.
        </p>
        <p class="kmom-text">
        Båda ämnen har med säkerhet att göra, vilket jag tycker alltid bör vara prioritet. Även om webbsidan helt klart suger, så länge den inte är farlig för dig som skapare eller
        för andra användare, så kan det alltid fixas.
        <p>
        <h3 class="kmomtextheader"><strong>Vilken är din TIL för detta kmom?</strong></h3>
        <p class="kmom-text">
        Under uppgiftens gång har jag lärt mig arbeta med Symfony, hur och vad composer används till. Jag satte också igång den gamla PHP motorn för att för att arbeta
        lite med templates och jsons som innehåller dynamiska värden men också arbetat mer med routes som i tidigare kurser.
        </p>
    </div>

    <div class="kmomcontent">
        <h2 id="kmom02">Kmom02</h2>
        
        <h3 class="kmomtextheader"><strong>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</strong></h3>
        <p class="kmom-text">
        Arv är när ett nytt objekt av en viss klass <em>ärver</em> både metoder och atribut från en förälder-klass. T.ex. Dog extends Animal, Dog ärver metoder och attribut från Animal klassen.
        Därav kan alla objekt som ärver från Animal-klassen ta använding av dess metoder.
        <br>
        Komposition är när en klass använder en annan klass som en del av sin struktur, ofta genom att skapa denna nya klassen inom sig.
        <br>
        Ett interface kan ses som ett "kontrakt" som ger ett objekt tillgång till de metoder som hör till interfacet på vilkoret att objektet följer ett visst uppsatt standard av interfacet.
        <br>
        Trait är en samling av metoder som tillger funktionalitet och som kan återanvändas över flera klasser genom att importera dem. 
        </p>
        
        <h3 class="kmomtextheader"><strong>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</strong></h3>
        <p class="kmom-text">
        Jag försökte så mycket som möjligt ta använding av det som fanns i <em>pig</em> övningen med routes, formulär och också struktur på objekten. Precis som i DiceGraphic i övningen så tillförser CardGraphic en
        representativ utf-8 symbol för att matcha motsvarande kort. Jag försökte också hålla klasserna så simpla som möjligt, då jag inte är helt säker på vad som kommer behöver göras med dem i kommande kmom.
        Jag blev nöjd med utseendet, layouten och hur det känns att navigera mellan sidorna.
        Behöver fixa värden på korten, ess har just nu har endast värdet 14 men ska ju kunna ha värdet 1 också.
        </p>
        
        <h3 class="kmomtextheader"><strong>Vilka är dina reflektioner så här långt med att jobba i Symfony med applikationskod enligt MVC?</strong></h3>
        <p class="kmom-text">
        Det känns bättre att jobba med routes in jämförelse med tidigare kurser. Detta kan dels vara på grund av att jag har arbetat så mycket med olika rutt-strukturer nu att jag bara vant mig, tycker att
        express och symfony kändes ganska lika till hur dem hanterade routes. Filsystemet kan vara lite jobbigt att navigera igenom dock. Också, att direkt spara objekt i sessionen är nyt för mig.
        <br><br>
        Varje gång vi arbetat med object och session innan, har vi behövt översätta objektets innehåll till ett nytt format och sätta in det i session, och sedan återskapa ett nytt objekt av samma
        klass som importerar innehållet som sparats i session för att skapa ett nytt objekt med samma innehåll. Dock, medans jag tycker att spara ett objekt i session är <em>'smidigt'</em>, så tror
        jag bara att det är mer <em>'convenient'</em> fast har inte är särskilt stor effekt på utvecklingen i jämförelse med att ge klassen du arbetar med två nya metoder.
        </p>
        
        <h3 class="kmomtextheader"><strong>Vilken är din TIL för detta kmom?</strong></h3>
        <p class="kmom-text">
        I detta Kmom har jag lär mig hur man skapar och utvecklar et nytt projekt/sida från grunden upp i symfony. Hur man arbetar med session och objekt inom php/symfony samt mer navigering
        mellan routes och att skapa både get/post formulär som interagerar med dessa routes.
        <br><br>
        Jag har också arbetat med objekt inom php, därav också arv och komposition mellan klasser samt också att visa upp Jsons som representerar innehållet inom dessa objekt.
        </p>
    </div>

    <div class="kmomcontent">
        <h2 id="kmom03">Kmom03</h2>
        <h3 class="kmomtextheader">Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?</h3>
        <p>
            Helt ärligt så föredrar jag att inte använda mig av diagram, i fall som dessa där det man ska utveckla är relativt simpelt. Jag tycker att det är lättare att bara skriva ner vad jag ska göra, förstå det, och sedan bara göra det. 
            Jag brukar redan spendare en ganska lång tid att tänka på hur jag ska strukturera koden innan jag börjar skriva något. Men jag känner dock att värdet av att få igång den här processen av flödesdiagram och god planering
            kan vara väldigt hjälpsamt under längre projekt och utvecklingsprocesser där om man bara beger sig in kan sluta upp i förvirring och inneffektiv utveckling.
        </p>

        <h3 class="kmomtextheader">Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden, dina klasser och applikationen som helhet?</h3>
        <p>
            Jag tyckte om strukturen jag fick till i controllern och kände också att jag lyckades hålla routes:en inom controllern ganska simpla. Det enda dem riktigt använts för är att hantera spelklassen och rendera templates.
            Förutom i ett fall då man <em>standat</em> i spelet, då det finns logik inom routen för att dra kort för dealern tills den har 17 eller mer. Spelklassen GameTwentyOne är också ganska simpel, i alla fall mer
            simepl än vad jag först föväntade mig när jag började titta på kmom:et.
            
            <br><br>
            Jag är nöjd med hur spelet fungerar och hur det ser ut, fast kände att strukturen jag först fått till inom kort-klasserna kanske
            hade kunnat hanterats bättre, kände att det var lite onödigt t.ex. att korten direkt har värden kopplade till sig då det är reglerna som bestämmer vad korten är värda och kan därför fattas
            inom spelklassen istället. Det gick ju såklart att lösa det på det sättet jag gjorde i spelet, där jag bara ändrade värden på korten som krävde det, men känner att det kanske kan finnas en bättre lösning
            och struktur man kan använda sig av.
        </p>

        <h3 class="kmomtextheader">Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen?</h3>
        <p>
            I början av kursen kändes allt väldigt nytt och jag var lite överväldigad av allt nytt som finns inom applikationen, det känns fortfarande som det finns mycket inom filerna som jag inte är helt hundra på vad det
            gör, men håller mig till det jag vet och försöker att inte göra något för komplicerat. Men det känns också som att jag nu lärt mig nog av php och att arbeta inom symphony för att kunna utveckla applikationer
            utan större problem.
        </p>

        <h3 class="kmomtextheader">Vilken är din TIL för detta kmom?</h3>
        <p>
            I detta kmom har jag skapat en spelklass som beror på tidigare skapade klasser och använder dessa klasser för att skapa ett spel. Jag har arbetat med en controller som hanterar routes och
            utför metoder på spelklassen beroende på spelarens beslut i spelet. Därmed har jag skapat templates som förklarar, dokumenterar samt renderar spelet och visar upp det för användaren.
            Implementerat linters och lekt runt med olika grader på dem för att hålla koden ren och snygg.
        </p>
        <br><br>   
    </div>

    <div class="kmomcontent">
        <h2 id="kmom04">Kmom04</h2>
        <h3 class="kmomtextheader"> Berätta hur du upplevde att skriva kod som testar annan kod med PHPUnit och hur du upplever phpunit rent allmänt.</h3>
        <p class="kmom-text">
            Har skrivit tester inom tidigare kurser och tycker att det är en bra metod att använda sig av för att säkerställa att koden fungerar som den ska.
            Jag tycker att phpunit är ett bra verktyg för att skriva tester och att köra dessa tester och fungerar till stor del likadant som i tidigare kurser med hur man
            sätter upp testerna och kör asserts, så kändes därför ganska bekant att implementera.
        </p>

        <h3 class="kmomtextheader">Hur väl lyckades du med kodtäckningen av din kod, lyckades du nå mer än 90% kodtäckning?</h3>
        <p class="kmom-text">
            För klasserna samt metoder som jag skrev tester för så lyckades jag med att nå över 90% kodtäckning, klasserna jag skrev tester för är alla kort klasser samt 21 spelet, samt dice klasserna som
            jag har för mig var exempel från ett tidigare kmom, men jag skrev tester för dem också.
            Dock så skrev jag inte tester för controllers eller routes,
            då jag inte riktigt visste hur jag skulle göra det / det var inget hårt krav. Lade också till länkar till test coverage och dokumentation i navigationsbaren.
        </p>

        <h3 class="kmomtextheader">Upplever du din egen kod som “testbar kod” eller finns det delar i koden som är mer eller mindre testbar och finns det saker som kan göras för att förbättra kodens testbarhet?</h3>
        <p class="kmom-text">
            Det mesta av koden som jag skrev tester för var ganska lätt att skriva tester för, då jag hade skrivit klasserna och metoderna för det mesta på ett ganska simpelt sätt.
            Dock när det kommer till klasser som har slumpmässiga värden så skulle det varit enklare att ha haft en metod som pålitligt kan ge resurser.
            // T.ex. för testa att ace:s värde kan vara 1 eller 11 i spelet 21
            hade varit enklare att testa om jag gjort en method för att direkt ge en spelare ett specifikt kort för att enklare testa hur värden testas i spelet. // Altså
            metoder som inte riktigt hade varit användningsbara i själva spelet fast hade varit användbara för att skriva tester.
        </p>

        <h3 class="kmomtextheader">Valde du att skriva om delar av din kod för att förbättra den eller göra den mer testbar, om så berätta lite hur du tänkte.</h3>
        <p class="kmom-text">
            Jag ändrade inte på någon kod för att göra den mer testbar, då jag tyckte att det mesta av koden var ganska lätt att skriva tester för, med vissa undantag.
            Jag kom dock att tänka på hur jag hade skrivit om vissa klasser om jag hade gjort om dem. Detta var något som jag kände i kmom03 också. Det finns ingen direkt anledning för
            t.ex. ett kort ska ha ett värde direkt kopplat till sig själv i själva klassen, då spel och regler ändrar värdet av specifika kort och borde därför hanteras direkt där.
            Men det system jag har just nu fungerar bra nog. 
        </p>

        <h3 class="kmomtextheader">Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”.</h3>
        <p class="kmom-text">
            Klasser och metoder som är ganska lätta att skriva tester för är oftast också ganska lätta att läsa och förstå.
            Därav så kan mer komplexa klasser och metoder vara svårare att skriva tester för, vilket då kan vara en indikation av <em>ful kod</em>.
        </p>

        <h3 class="kmomtextheader">Vilken är din TIL för detta kmom?</h3>
        <p class="kmom-text">
            I detta kmom har jag lärt mig att skriva tester för min kod och att använda mig av phpunit för att köra dessa tester.
            Jag har också lärt mig att använda mig av linters för att hålla koden ren och snygg samt att dokumentera klasser och metoder med PHP Dock Block inom GameTwentyOne klassen.
        </p>
        <br><br>
    </div>

    <div class="kmomcontent">
        <h2 id="kmom05">Kmom05</h2>
        <h3 class="kmomtextheader">Gick det bra att jobba igenom övningen med Symfony och Doctrine? Något särskilt du tänkte/reagerade på under övningen?</h3>
        <p class="kmom-text">
            Det gick ganska bra. Det är ju såklart ett helt nytt sätt att skapa och hantera databaser, men det kändes inte speciellt komplicerat, vilket jag antar är meningen med det. 
            Jag har tidigare jobbat mer direkt med SQL och manuellt definierade databasstrukturer, så att använda ett ramverk som Symfony och ett ORM som Doctrine var en helt ny upplevelse för mig.
            Jag är inte helt säker på hur enkelt det skulle vara att koppla ihop flera tabeller och skapa relationer mellan dem med Doctrine.
            Jag kan tänka mig att det kan vara lite mer komplicerat än det jag gjort hittills, men jag tycker att det fortfarande verkar vara mer
            effektivt och lättillgängligt än att bygga sådana relationer från grunden.
        </p>

        <h3 class="kmomtextheader">Berätta om din applikation och hur du tänkte när du byggde upp den. Tänkte du något speciellt på användargränssnittet?</h3>
        <p class="kmom-text">
            När jag först skapade biblioteket tänkte jag att det skulle fungera som en komplett applikation med sin egen navbar och flera sidor för att hantera böcker.
            Jag ville göra gränssnittet användarvänligt och intuitivt för att ge en bra upplevelse för användaren.
            Applikationen fick därför bara två flikar i navbaren: en för att visa alla böcker och en för att lägga till nya böcker.
        </p>
        <p class="kmom-text">
            Jag ville hålla gränssnittet ren och enkel för att fokusera på funktionaliteten snarare än en mer komplex design.
            För att ge användaren en bättre upplevelse när de interagerade med boken, lade jag till funktioner för att hantera en specifik bok — när användaren klickade på en bok,
            kunde de ta bort eller ändra informationen om boken. Jag lade också till flash-meddelanden som informerade användaren när en operation lyckats,
            vilket ser till att användaren vet att deras handlingar har registrerats.
        </p>

        <h3 class="kmomtextheader">Gick det bra att jobba med ORM i CRUD eller vad anser du om det? Jämför gärna med andra sätt att jobba med databaser.</h3>
        <p class="kmom-text">
            Det gick bra. Jag måste säga att jag inte riktigt kände att jag skapade min egen databas och arbetade mot den med mina egna funktioner.
            Med Doctrine kändes det mer som att jag definierade tabeller och relationer i kod, och sedan skapades själva databasen automatiskt åt mig.
            Doctrine tog hand om all hantering av databasen, vilket sparade mycket tid och energi, och det var väldigt smidigt att använda sig av.
        </p>
        <p class="kmom-text">
            Om jag hade byggt en databas manuellt hade jag behövt skriva en hel del SQL för att skapa tabellerna, definiera relationer och hantera de olika CRUD-operationerna.
            Doctrine å andra sidan gör allt det åt mig och jag kan fokusera mer på logiken i applikationen.
            Jag har inte tidigare arbetat med ett ORM-verktyg på det här sättet, så det var en intressant upplevelse få ett typ av interface för databasinteraktionen.
        </p>

        <h3 class="kmomtextheader">Vad är din uppfattning om ORM så här långt och relatera gärna till andra sätt att jobba med applikationskod mot databaser?</h3>
        <p class="kmom-text">
            Jag tycker att ORM är en mycket bra metod att använda sig av. Det känns som att det sparar mycket tid och energi,
            eftersom man slipper skriva egna funktioner eller SQL för att hantera databasen.
            Om jag hade byggt databasen från grunden hade jag behövt spendera mycket mer tid på att skapa och skriva funktioner för att hantera den,
            vilket jag tror skulle vara mycket mer tidskrävande och komplicerat.
            Doctrine och ORM verktyg generellt gör det möjligt att ta bort komplexiteten och koncentrera sig på applikationens logik istället.
        </p>

        <h3 class="kmomtextheader">Vilken är din TIL för detta kmom?</h3>
        <p class="kmom-text">
            I detta kmom har jag lärt mig att bygga och hantera en databas med hjälp av Doctrine.
            Jag har fått en bättre förståelse för hur ORM fungerar och hur det kan användas för att förenkla hanteringen av databaser i en applikation.
            Jag har också insett vikten av att använda ramverk och verktyg som Symfony och Doctrine för att göra utvecklingen mer effektiv och överskådlig.
        </p>
    </div>
    


    <div class="kmomcontent">
        <h2 id="kmom06">Kmom06</h2>

        <h3 class="kmomtextheader">Hur uppfattade du verktyget phpmetrics och fann du några särskilda bitar mer värdefulla än andra? Var det några särskilda metrics eller bilder du uppskattade?</h3>
        <p>
            Jag tyckte om huvudbilden som fanns tillgänglig på översikts vyn, den är simpel, visar vilka moduler som kan behöva lite kärlek och vilka som är i bra skick. I och
            med att bilden är så enkel också så kan man direkt se hur stor påverkan vissa ändringar kan ha på koden. T.ex. att lägga till kommentarer på alla klasser
            metoder och kontrollers gjorde att färgen på modulerna inom bilden gick från främst röd till en 50/50 mix av gul-grön. Jag tycker att enkla diagram och bilder
            som dessa är väldigt användbara för att få en snabb överblick över koden, dess kvalitet och tillåter en att snabbt identifiera problematiska delar av koden.
        </p>

        <p>
            Komplexitets tabellen var också väldigt användbar, då den visar vilka klasser som är mest komplexa och kan behöva delas upp i mindre delar samt vilka som är
            enkla kan lämnas som dem är. Coolt var det också att kunna se hur många klasser som beror/är beroende av andra klasser och hur många det är. 
            Detta var inte speciellt någonting som jag fördjupade mig in inom kmom:et fast jag tycker att det är en intressant aspekt av phpmetrics.
        </p>
        
        <h3 class="kmomtextheader">Berätta hur det gick att integrera med Scrutinizer och vilken är din första känsla av verktyget och dess badges? Vilken kodtäckning och kodkvalitet fick du efter första bygget?</h3>
        <p>
            Till en början råkade jag integrera det utan scrutinizer.yml filen, fast avbröt det snabbt. Efter att ha lagt till filen och konfigurerat den så gick det smidigt att integrera.
            Scrutinizer gav mig en kodkvalitet på 9.97 till att börja med, vilket jag var väldigt nöjd med. Resterande 0.03 poäng drogs av på grund av en specifik metod inom
            GameTwentyOne klassen som hade ett par för många conditions. Skulle nog kunna bryta ut den i mindre funktioner, men kände att det inte var nödvändigt. Min kodtäckning
            till en början var 25.5%, detta var med alla normala klasser och deras metoder testade, fast inte controllers eller routes.
        </p>

        <p>
            Jag försökte under Kmom:ets gång att öka kodtäckningen på applikationen, klassen Library som skapades under Kmom05 hade ännu inga tester alls och ledde till en ökning
            i code-coverage på runt 4%. Fast ungefär 70% av koden som kan täckas av tester är bestånde av controllers och routes. Jag har tidigare inte testat dem alls men
            försökte under detta kmom, till ingen lycka alls... Jag skapade många tester för många av de olika kontrollerna och fick dem att visa att sidor lästes in ordentligt och
            att vissa formulär fungerar som tänkt, fast inget av det hjälpte med kodtäckningen alls. Tyvärr, även om mina tester fungerade bra för mig i min miljö så orsakade dem
            stora problem för scrutinizer, och misslyckades med builden. För att se kropparna av dessa tester, checka tests_failed.
        </p>

        <p>
            Badges är en fin touch, och kan få en att känna sig lite stolt över sin kod. Fast jag tror att det är viktigt att inte stirra sig blind på dem, då de inte alltid
            är en indikation av kvaliteten på koden. Jag tycker att det är viktigt att använda sig av verktygen för att inte bara förbättra koden, utan också
            för att förstå varför koden är som den är och hur du undviker att göra samma misstag i framtiden.
        </p>

        <h3 class="kmomtextheader">Hur är din egen syn på kodkvalitet, berätta lite om den? Tror du man kan man påvisa kodkvalitet i någon viss mån med badges eller vad tror du?</h3>
        <p>
            Konceptet är fint, fast jag är inte helt hundra på hur väl det fungerar i praktiken. T.ex. code coverage som indikerar hur mycket av din kod som utförs
            av dina tester tycker man bör vara runt 90-100%. Fast vissa delar av kod kanske inte tjänar sig att testas, eller är såpass svåra att testa att det inte är värt det.
        </p>

        <p>
            Ett projekt med 10 scrutinizer poäng, 100% code coverage och inga problem alls inom PHPmetrics, talar för mig ingenting om kvaliteten på koden utan snarare att
            projektet självt är såpass simpelt att det inte finns något att klaga på. Man kan efterstäva att ha ren <em>ren kod</em> som möjligt, fast att eftersöka 100% perfektion
            är i de flesta fall helt onödigt. Såklart så finns det delar av koden som bör vara så ren, säker och testad som möjligt, t.ex. säkerhetsrelaterade delar.
        </p>


        <h3 class="kmomtextheader">Vilken är din TIL för detta kmom?</h3>
        <p>
            I detta kmom har jag lärt mig att använda mig av phpmetrics och scrutinizer för att mäta kodkvalitet, kodtäckning och för att implementera
            et CI/CD arbetsflöde där kod som pushas till GitHub automatiskt går igenom tester och kodkvalitetskontroller. Jag har också fördjupat mig inom dessa verktyg
            för att använda tillgiven information om problematiska delar koden för att identifiera samt förbättra och optimera dem.
        </p>
    </div>


    <div class="kmomcontent">
        <h2 id="kmom10">Kmom07-Kmom10</h2>

        <h3 class="kmomtextheader">Uppfyllda Krav:</h3>

            <h4 class="kmomtextheader">Krav 1-3:</h4>

            <p><strong>Innehåll och utseende</strong></p>
            <p><u>Skapa en landningssida /proj som syns i navbaren på din report-sida. Denna sida är din förstasida på projektets webbplats.</u></p>
            <p>
                Länk till projektet finns i navbaren på den normala sidan, denna länk leder till landningsidan där man kan antingen påbärja spelet eller gå till about sidan för information
                om spelet.
            </p>
            <p><u>Välj ditt fokus för ditt projekt. Implementera det i din webbplats under proj/.</u></p>
            <p>
                Själva projektet finns tillgängliga under rutter med proj/ startelse. Min fokus för projektet var spelet Black Jack då jag först tänkt implementera en klass som inheritar klassen GameTwentyOne från kmom03 och
                sedan bygga funktionalitet på detta för att skapa ett fulländat blackjack spel. Fast I slutändan gjorde jag helt enkelt en helt egen klass som hanterar spelet.
                BlackJack.php.
            </p>
            <p><u>Ditt projekt skall ha en stil och ett utseende som tydligt skiljer sig från din report-sida.</u></p>
            <p>
                Twigs från rutterna i projektet implementerar inte längre base twiggen som använts inom alla andra normala rutter inom applikationen och har istället en egen base twigg för
                blackjack spelet. Detta gör att blackjack spelet har en helt egen stil och utseende som skiljer sig från resten av applikationen.
            </p>

            <p><u>Det skall utseendemässigt se ut som en ny webbplats så bygg en “ny” stylesheet eller modifiera din befintliga. Modifiera i någon omfattning färg, typsnitt och utseende på header och footer.</u></p>
            <p>
                Den nya base twiggen använder nya klasser och element som stylats separat inom stylesheeten för att skapa en ny stil för blackjack spelet.
            </p>

            <p><u>Skapa en separat navbar för projektet som enbart innehåller länkarna för projektet.</u></p>
            <p>
                En separat navbar finns för blackjack spelet som endast innehåller länkar för blackjack spelet.
            </p>

            <p><u>En sida /proj/about som ger en kort introduktion till ditt projekt och vad det handlar om.</u></p>
            <p>
                Länk till about sidan finns på landningssidan för blackjack spelet fanns kan också nås normalt genom direkt url och innehåller en kort introduktion till spelet.
            </p>

            <p><strong>Repo och dokumentation</strong></p>
            <p><u>Ditt git repo skall ha en README.md.</u></p>
            <p>Finns</p>
            <p><u>Det skall finnas badges som är klickbara och leder till uppdaterade Scrutinizer rapporter för build, coverage och quality.</u></p>
            <p>Finns med extra i README</p>
            <p><u>Beskriv innehållet av repot och berätta varför det finns. som beskriver innehållet i någon omfattning.</u></p>
            <p>Finns i README</p>
            <p><u>Instruktion för hur man klonar och startar igång webbplatsen</u></p>
            <p>Finns i README</p>
            <p><u>Innehållet i docs/ skall vara uppdaterat</u></p>
            <p>
                Det är det.
            </p>

            <p><strong>Kodtäckning</strong></p>
            <p><u>Sikta på över 90% kodtäckning (exkludera filer som inte är relevanta).</u></p>
            <p>
                Kodtäckning ligger på > 98% för täckning på klasser vilket jag antar är det som räknas som (relevant).
                Har inte lagt någon fokus eller tid på at testa routes eller controllers i detta kmom då jag inte ansett det som nödvändigt
                då näst intill all funktionalitet av spelet finns inom själva klassen.
                Kodtäckning finns tillgängligt på /docs/coverage/index.html.
            </p>
            <p><u>Generera dokumentation med phpdoc.</u></p>
            <p>
                Dokumentation finns tillagd för alla nya klasser och controller routes.
            </p>
            <p><u>Generera metrics med phpmetrics.</u></p>
            <p>
                Uppdaterade Metrics finns genererade och finns tillgängliga på /docs/metrics/index.html.
            </p>


            <h4 class="kmomtextheader">Krav 4: JSON API:</h4>
            <p><u>Skapa ett JSON API till dit projekt och presentera det i sidan proj/api.</u></p>
            <p>
                Routes för BlackJack som svarar med JSON data finns tillgängligt på /proj/api routes inom ApiBlackJackController kontrollern.
            </p>

            <p><u>Skapa minst 5 olika JSON routes varav minst en skall vara en POST route.</u></p>
            <p>
                Det finns 5 olika routes tillgängliga, alla kollar om BlackJack finns i sessionen, om inte så skapas en ny instans av spelet med 1 spelare och 100 i banken.
                <ul>
                    <li>Route som skapar en ny instans av spelet, detta är en post route som tar emot ett integer värde för hur många häder/spelare spelet ska bestå av.</li>
                    <li>Route som ger alla spelare i spelet, deras status, poäng samt vilken den nuvarande spelaren är med currentPlayerIndex.</li>
                    <li>Route som utför en (hit) i spelet, vilket drar ett kort för den nuvarande spelaren och svarar med JSON data om spelarna.</li>
                    <li>Route som utför en (stand) i spelet, ändrar isStanding status för nuvarande spelare och ändrar index för nuvarande spelare till nästa. Svarar med spelare, deras status och poäng.</li>
                    <li>Route som ändrar turn i spelet till nästa spelare och svarar med JSON data om currentPlayerIndex, vilket är den nuvarande spelaren.</li>
                </ul>
            </p>

            <p><u>I sidan skall man kunna klicka på samtliga länkar/knappar för att testa ditt API.</u></p>
            <p>
                Alla rutter från ovan kan på Black Jack API landningssidan nås genom knappar, förutom post routen som
                använder ett nummer från formuläret för att skapa en ny instans av spelet.
            </p>

        <h3 class="kmomtextheader">Genomföring:</h3>
            <p><u>Var projektet lätt eller svårt?</u></p>
            <p>
                Projektet var inte speciellt svårt, fast krävde att man tänkte igenom hur din klass var strukturad och hur spelet skulle fungera med flera spelare.
                Jag kände mig perfekt utrusted för att skapa och genomföra detta projekt då jag hade arbetat med samma klasser och strukturer tidigare i kursen,
                detta var till dels på grund av att jag fortsatt arbeta inom samma kortklasser som jag skapat tidigare i kursen och redan hade en bra förståelse för hur
                dem fungerar och hur dem kan användas.
            </p>

            <p><u>Tog det lång tid?</u></p>
            <p>
                För mig tog det runt 30 timmar att helt genomföra mitt projekt med krav 1-3 och json API:et. Hur lång tid det tar en tror jag till stor del
                beror på vilket spel man beslutat sig utveckla, hur komplicerat spelet är, samt hur mycket man tänkt på kodstrukturen innan man börjar jobba.
                Jag hade inte specielt mycket tid att implementera själva projektet men spenderade mycket tid på att tänka på hur jag skulle strukturera koden
                och vilka rutter och klasser jag skulle behöva för att genomföra projektet. Detta ledde till att jag kunde genomföra projektet relativt snabbt
                i form av tid spenderad på att skriva själva koden. Vilket också är sättet jag tycker om att arbeta på.
            </p>
            <p><u>Vad var svårt och vad gick lätt?</u></p>
            <p>
                Jag skulle nog inte säga att något var speciellt svårt, fast vissa delar av projektet var smidigare att implementera än andra.
            </p>
            <p><u>Var det ett bra och rimligt projekt för denna kursen?</u></p>
            <p>
                Väldigt rimligt, då det bygger på tidigare kmom och så länge man fortfarande besitter kunskaper om strukturen och hur klasserna fungerar så är det
                ett bra projekt att arbeta med.
            </p>

        <h3 class="kmomtextheader">Tankar om kursen:</h3>
            <p><u>Ge feedback till lärarna och förslå eventuella förbättringsförslag till kommande kurstillfällen.</u></p>
            <p>
                Jag tycker att mos:s föreläsningar är bra, informativa och ger bra instruktioner för att börja med uppgifterna. Detsamma med övningarna. Men det känns alltid som
                att när man gjorde någonting för föreläsningarna eller övningarna så behövde man alltid repetera det igen för själva uppgiften vilket kändes lite onödigt.
                Jag förstår meningen med att testa nya tekniker i ett säkert och kontrollerat utrymme, fast det kändes som att i vissa fall så var det lite onödigt att göra
                det direkt i repot hade inte direkt gjort någonting annorlunda och hade bara sparat tid.
            </p>
            <p><u>Är du nöjd/missnöjd?</u></p>
            <p>
                Jag är väldigt nöjd, mest för att jag innan inte speciellt tyckt om PHP efter att ha arbetat med det i Webtek, fast nu känner jag att jag har en bra förståelse
                för språket och hur det fungerar. I alla fall mycket bättre så än innan kursen.
            </p>
            <p><u>Kommer du att rekommendera kursen till dina vänner/kollegor?</u></p>
            <p>
                Jag skulle inte ha några som helst problem att rekommendera kursen till någon som en introduktion till att lära sig PHP och Symfony.
            </p>
            <p><u>På en skala 1-10, vilket betyg ger du kursen?</u></p>
            <p>
                Jag skulle ge den 8/10.
            </p>

    </div>



{% endblock %}
